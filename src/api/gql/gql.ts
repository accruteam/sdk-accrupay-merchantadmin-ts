/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantCustomerPaymentMethodFragmentFragmentDoc,
    "\n  query UserMerchantCustomerPaymentMethods(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n    $isDefault: Boolean,\n    $merchantInternalCustomerCode: String,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantCustomerPaymentMethods(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      methodType: $methodType,\n      isDefault: $isDefault,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantCustomerPaymentMethodsDocument,
    "\n  query UserMerchantCustomerPaymentMethod($merchantId: String, $merchantCustomerPaymentMethodId: String!) {\n    userMerchantCustomerPaymentMethod(merchantId: $merchantId, merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": typeof types.UserMerchantCustomerPaymentMethodDocument,
    "\n  mutation UserMerchantCustomerPaymentMethodSyncOne(\n    $merchantId: String,\n    $merchantInternalCustomerCode: String!,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantCustomerPaymentMethodSyncOne(\n      merchantId: $merchantId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": typeof types.UserMerchantCustomerPaymentMethodSyncOneDocument,
    "\n  query HealthCheck {\n    healthCheck\n  }\n": typeof types.HealthCheckDocument,
    "\n  fragment MerchantUserInvitationFragment on MerchantUserInvitation {\n    id\n\n    role\n    email\n\n    expiresAt\n    acceptedAt\n    rejectedAt\n    canceledAt\n\n    createdByMerchantUserId\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    updatedAt\n    createdAt\n  }\n": typeof types.MerchantUserInvitationFragmentFragmentDoc,
    "\n  query UserMerchantSentInvitations(\n    $merchantId: String!,\n    $accepted: Boolean,\n    $canceled: Boolean,\n    $expired: Boolean,\n    $rejected: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantSentInvitations(\n      merchantId: $merchantId,\n\n      accepted: $accepted,\n      canceled: $canceled,\n      expired: $expired,\n      rejected: $rejected,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantSentInvitationsDocument,
    "\n  query UserMerchantSentInvitation($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitation(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserMerchantSentInvitationDocument,
    "\n  mutation UserMerchantSentInvitationCreate($data: MerchantUserInvitationCreateSchema!, $merchantId: String) {\n    userMerchantSentInvitationCreate(data: $data, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserMerchantSentInvitationCreateDocument,
    "\n  mutation UserMerchantSentInvitationCancel($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitationCancel(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserMerchantSentInvitationCancelDocument,
    "\n  query UserReceivedMerchantInvitations(\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userReceivedMerchantInvitations(\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserReceivedMerchantInvitationsDocument,
    "\n  query UserReceivedMerchantInvitation($invitationId: String!) {\n    userReceivedMerchantInvitation(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserReceivedMerchantInvitationDocument,
    "\n  mutation UserReceivedMerchantInvitationAccept($invitationId: String!) {\n    userReceivedMerchantInvitationAccept(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserReceivedMerchantInvitationAcceptDocument,
    "\n  mutation UserReceivedMerchantInvitationReject($invitationId: String!) {\n    userReceivedMerchantInvitationReject(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": typeof types.UserReceivedMerchantInvitationRejectDocument,
    "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantFragmentFragmentDoc,
    "\n  fragment MerchantUserFragment on MerchantUser {\n    id\n    isEnabled\n    role\n    createdAt\n    updatedAt\n\n    user {\n      ...UserBaseFragment\n    }\n\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    invitationId\n  }\n": typeof types.MerchantUserFragmentFragmentDoc,
    "\n  query UserMerchants(\n    $merchantId: String,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchants(\n      id: $merchantId,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantsDocument,
    "\n  query UserMerchant($merchantId: String!) {\n    userMerchant(merchantId: $merchantId) {\n      ...MerchantFragment\n    }\n  }\n": typeof types.UserMerchantDocument,
    "\n  mutation UserMerchantCreate($data: MerchantCreateSchema!) {\n    userMerchantCreate(data: $data) {\n      ...MerchantUserFragment\n    }\n  }\n": typeof types.UserMerchantCreateDocument,
    "\n  mutation UserMerchantUpdate($merchantId: String!, $data: MerchantUpdateSchema!) {\n    userMerchantUpdate(merchantId: $merchantId, data: $data) {\n      ...MerchantFragment\n    }\n  }\n": typeof types.UserMerchantUpdateDocument,
    "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantPaymentPlanTemplateFragmentFragmentDoc,
    "\n  query UserMerchantPaymentPlanTemplates(\n    $merchantId: String,\n    $id: String,\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlanTemplates(\n      merchantId: $merchantId,\n      id: $id,\n      name: $name,\n      currency: $currency,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantPaymentPlanTemplatesDocument,
    "\n  query UserMerchantPaymentPlanTemplate($merchantId: String, $id: String!) {\n    userMerchantPaymentPlanTemplate(merchantId: $merchantId, id: $id) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": typeof types.UserMerchantPaymentPlanTemplateDocument,
    "\n  mutation UserMerchantPaymentPlanTemplateSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanTemplateSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": typeof types.UserMerchantPaymentPlanTemplateSyncOneDocument,
    "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    templateId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantPaymentPlanFragmentFragmentDoc,
    "\n  query UserMerchantPaymentPlans(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n    $currency: CURRENCY,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n    $templateId: String,\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n    $hasProviderError: Boolean,\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlans(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n      templateId: $templateId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n      hasProviderError: $hasProviderError,\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantPaymentPlansDocument,
    "\n  query UserMerchantPaymentPlan($merchantId: String, $merchantPaymentPlanId: String!) {\n    userMerchantPaymentPlan(merchantId: $merchantId, merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": typeof types.UserMerchantPaymentPlanDocument,
    "\n  mutation UserMerchantPaymentPlanSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": typeof types.UserMerchantPaymentPlanSyncOneDocument,
    "\n  fragment MerchantTransactionProviderApplicationFragment on MerchantTransactionProviderApplication {\n    id\n    merchantId\n    provider\n    providerCode\n    providerStatus\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    status\n    statusDescription\n    startedAt\n    closedAt\n    createdAt\n    updatedAt\n\n    name\n    industry\n    websiteUrl\n    entityType\n    email\n    phone\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n  }\n": typeof types.MerchantTransactionProviderApplicationFragmentFragmentDoc,
    "\n  query UserMerchantTransactionProviderApplications(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $providerCode: String,\n    $status: MERCHANT_TRANSACTION_PROVIDER_APPLICATION_STATUS,\n    $started: Boolean,\n    $closed: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviderApplications(\n      merchantId: $merchantId,\n      provider: $provider,\n      providerCode: $providerCode,\n      status: $status,\n      started: $started,\n      closed: $closed,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderApplicationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantTransactionProviderApplicationsDocument,
    "\n  query UserMerchantTransactionProviderApplication($merchantId: String, $merchantTransactionProviderApplicationId: String!) {\n    userMerchantTransactionProviderApplication(\n      merchantId: $merchantId,\n      merchantTransactionProviderApplicationId: $merchantTransactionProviderApplicationId\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n": typeof types.UserMerchantTransactionProviderApplicationDocument,
    "\n  mutation UserMerchantTransactionProviderApplicationApply($merchantId: String, $provider: TRANSACTION_PROVIDER!) {\n    userMerchantTransactionProviderApplicationApply(\n      merchantId: $merchantId,\n      provider: $provider\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n": typeof types.UserMerchantTransactionProviderApplicationApplyDocument,
    "\n  mutation UserMerchantTransactionProviderCreate($merchantId: String, $data: UserMerchantTransactionProviderCreateSchema!) {\n    userMerchantTransactionProviderCreate(\n      merchantId: $merchantId,\n      data: $data\n    ) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": typeof types.UserMerchantTransactionProviderCreateDocument,
    "\n  query UserMerchantTransactionProviderGetCredentialsSchema($merchantId: String, $provider: TRANSACTION_PROVIDER!, $format: TRANSACTION_PROVIDER_CREDENTIALS_SCHEMA_FORMAT!) {\n    userMerchantTransactionProviderGetCredentialsSchema(\n      merchantId: $merchantId,\n      provider: $provider,\n      format: $format\n    )\n  }\n": typeof types.UserMerchantTransactionProviderGetCredentialsSchemaDocument,
    "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantTransactionProviderFragmentFragmentDoc,
    "\n  query UserMerchantTransactionProviders(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviders(\n      merchantId: $merchantId,\n      provider: $provider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantTransactionProvidersDocument,
    "\n  query UserMerchantTransactionProvider($merchantId: String, $merchantTransactionProviderId: String!) {\n    userMerchantTransactionProvider(merchantId: $merchantId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": typeof types.UserMerchantTransactionProviderDocument,
    "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n\n    paymentPlanId\n\n    relatedTransactionId\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantTransactionFragmentFragmentDoc,
    "\n  query UserMerchantTransactions(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $action: TRANSACTION_ACTION,\n    $providerCode: String,\n    $providerRelatedCode: String,\n    $token: String,\n    $paymentMethodType: PAYMENT_METHOD,\n    $currency: CURRENCY,\n    $status: TRANSACTION_STATUS,\n    $statuses: [TRANSACTION_STATUS!],\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n    $transactionProviderId: String,\n    $paymentMethodId: String,\n    $paymentPlanId: String,\n    $relatedTransactionId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $started: Boolean,\n    $succeeded: Boolean,\n    $failed: Boolean,\n    $canceled: Boolean,\n    $reverted: Boolean,\n    $disputed: Boolean,\n    $transactionDateFrom: DateTimeISO,\n    $transactionDateTo: DateTimeISO,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactions(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      action: $action,\n      providerCode: $providerCode,\n      providerRelatedCode: $providerRelatedCode,\n      token: $token,\n      paymentMethodType: $paymentMethodType,\n      currency: $currency,\n      status: $status,\n      statuses: $statuses,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      transactionProviderId: $transactionProviderId,\n      paymentMethodId: $paymentMethodId,\n      paymentPlanId: $paymentPlanId,\n      relatedTransactionId: $relatedTransactionId,\n      transactionProvider: $transactionProvider,\n      started: $started,\n      succeeded: $succeeded,\n      failed: $failed,\n      canceled: $canceled,\n      reverted: $reverted,\n      disputed: $disputed,\n      hasProviderError: $hasProviderError,\n      \n      transactionDateFrom: $transactionDateFrom,\n      transactionDateTo: $transactionDateTo,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.UserMerchantTransactionsDocument,
    "\n  query UserMerchantTransaction(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransaction(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.UserMerchantTransactionDocument,
    "\n  mutation UserMerchantTransactionSyncOne(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransactionSyncOne(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.UserMerchantTransactionSyncOneDocument,
    "\n  fragment UserBaseFragment on User {\n    id\n    name\n    email\n    phone\n    createdAt\n    updatedAt\n    isAdmin\n    emailVerificationId\n    phoneVerificationId\n  }\n": typeof types.UserBaseFragmentFragmentDoc,
    "\n  fragment UserFragment on User {\n    ...UserBaseFragment\n    merchants {\n      ...MerchantUserFragment\n    }\n  }\n": typeof types.UserFragmentFragmentDoc,
    "\n  query User {\n    user {\n      ...UserFragment\n    }\n  }\n": typeof types.UserDocument,
    "\n  mutation UserSignUpWithEmailStart($data: UserSignUpWithEmailStartSchema!) {\n    userSignUpWithEmailStart(data: $data)\n  }\n": typeof types.UserSignUpWithEmailStartDocument,
    "\n  mutation UserSignUpWithEmailVerify($data: UserSignUpWithEmailVerifySchema!) {\n    userSignUpWithEmailVerify(data: $data)\n  }\n": typeof types.UserSignUpWithEmailVerifyDocument,
    "\n  mutation UserSignUpWithEmailFinish($data: UserSignUpWithEmailFinishSchema!) {\n    userSignUpWithEmailFinish(data: $data)\n  }\n": typeof types.UserSignUpWithEmailFinishDocument,
    "\n  mutation UserUpdateData($data: UserUpdateDataSchema!) {\n    userUpdateData(data: $data) {\n      ...UserFragment\n    }\n  }\n": typeof types.UserUpdateDataDocument,
    "\n  mutation UserSessionsClose {\n    userSessionsClose\n  }\n": typeof types.UserSessionsCloseDocument,
    "\n  mutation UserPasswordChangeStart($data: UserPasswordChangeStartSchema!) {\n    userPasswordChangeStart(data: $data)\n  }\n": typeof types.UserPasswordChangeStartDocument,
    "\n  mutation UserPasswordChangeFinish($data: UserPasswordChangeFinishSchema!) {\n    userPasswordChangeFinish(data: $data)\n  }\n": typeof types.UserPasswordChangeFinishDocument,
    "\n  mutation UserEmailVerifyOrChangeStart($data: UserEmailVerifyOrChangeStartSchema!) {\n    userEmailVerifyOrChangeStart(data: $data)\n  }\n": typeof types.UserEmailVerifyOrChangeStartDocument,
    "\n  mutation UserEmailVerifyOrChangeFinish($data: UserEmailVerifyOrChangeFinishSchema!) {\n    userEmailVerifyOrChangeFinish(data: $data) {\n      ...UserFragment\n    }\n  }\n": typeof types.UserEmailVerifyOrChangeFinishDocument,
    "\n  mutation UserHandleLoginAttempt($email: String!) {\n    userHandleLoginAttempt(email: $email)\n  }\n": typeof types.UserHandleLoginAttemptDocument,
    "\n  mutation UserPasswordResetStart($data: UserPasswordResetStartSchema!) {\n    userPasswordResetStart(data: $data)\n  }\n": typeof types.UserPasswordResetStartDocument,
    "\n  mutation UserPasswordResetFinish($data: UserPasswordResetFinishSchema!) {\n    userPasswordResetFinish(data: $data)\n  }\n": typeof types.UserPasswordResetFinishDocument,
};
const documents: Documents = {
    "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantCustomerPaymentMethodFragmentFragmentDoc,
    "\n  query UserMerchantCustomerPaymentMethods(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n    $isDefault: Boolean,\n    $merchantInternalCustomerCode: String,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantCustomerPaymentMethods(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      methodType: $methodType,\n      isDefault: $isDefault,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantCustomerPaymentMethodsDocument,
    "\n  query UserMerchantCustomerPaymentMethod($merchantId: String, $merchantCustomerPaymentMethodId: String!) {\n    userMerchantCustomerPaymentMethod(merchantId: $merchantId, merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": types.UserMerchantCustomerPaymentMethodDocument,
    "\n  mutation UserMerchantCustomerPaymentMethodSyncOne(\n    $merchantId: String,\n    $merchantInternalCustomerCode: String!,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantCustomerPaymentMethodSyncOne(\n      merchantId: $merchantId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": types.UserMerchantCustomerPaymentMethodSyncOneDocument,
    "\n  query HealthCheck {\n    healthCheck\n  }\n": types.HealthCheckDocument,
    "\n  fragment MerchantUserInvitationFragment on MerchantUserInvitation {\n    id\n\n    role\n    email\n\n    expiresAt\n    acceptedAt\n    rejectedAt\n    canceledAt\n\n    createdByMerchantUserId\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    updatedAt\n    createdAt\n  }\n": types.MerchantUserInvitationFragmentFragmentDoc,
    "\n  query UserMerchantSentInvitations(\n    $merchantId: String!,\n    $accepted: Boolean,\n    $canceled: Boolean,\n    $expired: Boolean,\n    $rejected: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantSentInvitations(\n      merchantId: $merchantId,\n\n      accepted: $accepted,\n      canceled: $canceled,\n      expired: $expired,\n      rejected: $rejected,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantSentInvitationsDocument,
    "\n  query UserMerchantSentInvitation($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitation(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserMerchantSentInvitationDocument,
    "\n  mutation UserMerchantSentInvitationCreate($data: MerchantUserInvitationCreateSchema!, $merchantId: String) {\n    userMerchantSentInvitationCreate(data: $data, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserMerchantSentInvitationCreateDocument,
    "\n  mutation UserMerchantSentInvitationCancel($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitationCancel(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserMerchantSentInvitationCancelDocument,
    "\n  query UserReceivedMerchantInvitations(\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userReceivedMerchantInvitations(\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserReceivedMerchantInvitationsDocument,
    "\n  query UserReceivedMerchantInvitation($invitationId: String!) {\n    userReceivedMerchantInvitation(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserReceivedMerchantInvitationDocument,
    "\n  mutation UserReceivedMerchantInvitationAccept($invitationId: String!) {\n    userReceivedMerchantInvitationAccept(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserReceivedMerchantInvitationAcceptDocument,
    "\n  mutation UserReceivedMerchantInvitationReject($invitationId: String!) {\n    userReceivedMerchantInvitationReject(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n": types.UserReceivedMerchantInvitationRejectDocument,
    "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantFragmentFragmentDoc,
    "\n  fragment MerchantUserFragment on MerchantUser {\n    id\n    isEnabled\n    role\n    createdAt\n    updatedAt\n\n    user {\n      ...UserBaseFragment\n    }\n\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    invitationId\n  }\n": types.MerchantUserFragmentFragmentDoc,
    "\n  query UserMerchants(\n    $merchantId: String,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchants(\n      id: $merchantId,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantsDocument,
    "\n  query UserMerchant($merchantId: String!) {\n    userMerchant(merchantId: $merchantId) {\n      ...MerchantFragment\n    }\n  }\n": types.UserMerchantDocument,
    "\n  mutation UserMerchantCreate($data: MerchantCreateSchema!) {\n    userMerchantCreate(data: $data) {\n      ...MerchantUserFragment\n    }\n  }\n": types.UserMerchantCreateDocument,
    "\n  mutation UserMerchantUpdate($merchantId: String!, $data: MerchantUpdateSchema!) {\n    userMerchantUpdate(merchantId: $merchantId, data: $data) {\n      ...MerchantFragment\n    }\n  }\n": types.UserMerchantUpdateDocument,
    "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantPaymentPlanTemplateFragmentFragmentDoc,
    "\n  query UserMerchantPaymentPlanTemplates(\n    $merchantId: String,\n    $id: String,\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlanTemplates(\n      merchantId: $merchantId,\n      id: $id,\n      name: $name,\n      currency: $currency,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantPaymentPlanTemplatesDocument,
    "\n  query UserMerchantPaymentPlanTemplate($merchantId: String, $id: String!) {\n    userMerchantPaymentPlanTemplate(merchantId: $merchantId, id: $id) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": types.UserMerchantPaymentPlanTemplateDocument,
    "\n  mutation UserMerchantPaymentPlanTemplateSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanTemplateSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": types.UserMerchantPaymentPlanTemplateSyncOneDocument,
    "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    templateId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantPaymentPlanFragmentFragmentDoc,
    "\n  query UserMerchantPaymentPlans(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n    $currency: CURRENCY,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n    $templateId: String,\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n    $hasProviderError: Boolean,\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlans(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n      templateId: $templateId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n      hasProviderError: $hasProviderError,\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantPaymentPlansDocument,
    "\n  query UserMerchantPaymentPlan($merchantId: String, $merchantPaymentPlanId: String!) {\n    userMerchantPaymentPlan(merchantId: $merchantId, merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": types.UserMerchantPaymentPlanDocument,
    "\n  mutation UserMerchantPaymentPlanSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": types.UserMerchantPaymentPlanSyncOneDocument,
    "\n  fragment MerchantTransactionProviderApplicationFragment on MerchantTransactionProviderApplication {\n    id\n    merchantId\n    provider\n    providerCode\n    providerStatus\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    status\n    statusDescription\n    startedAt\n    closedAt\n    createdAt\n    updatedAt\n\n    name\n    industry\n    websiteUrl\n    entityType\n    email\n    phone\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n  }\n": types.MerchantTransactionProviderApplicationFragmentFragmentDoc,
    "\n  query UserMerchantTransactionProviderApplications(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $providerCode: String,\n    $status: MERCHANT_TRANSACTION_PROVIDER_APPLICATION_STATUS,\n    $started: Boolean,\n    $closed: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviderApplications(\n      merchantId: $merchantId,\n      provider: $provider,\n      providerCode: $providerCode,\n      status: $status,\n      started: $started,\n      closed: $closed,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderApplicationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantTransactionProviderApplicationsDocument,
    "\n  query UserMerchantTransactionProviderApplication($merchantId: String, $merchantTransactionProviderApplicationId: String!) {\n    userMerchantTransactionProviderApplication(\n      merchantId: $merchantId,\n      merchantTransactionProviderApplicationId: $merchantTransactionProviderApplicationId\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n": types.UserMerchantTransactionProviderApplicationDocument,
    "\n  mutation UserMerchantTransactionProviderApplicationApply($merchantId: String, $provider: TRANSACTION_PROVIDER!) {\n    userMerchantTransactionProviderApplicationApply(\n      merchantId: $merchantId,\n      provider: $provider\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n": types.UserMerchantTransactionProviderApplicationApplyDocument,
    "\n  mutation UserMerchantTransactionProviderCreate($merchantId: String, $data: UserMerchantTransactionProviderCreateSchema!) {\n    userMerchantTransactionProviderCreate(\n      merchantId: $merchantId,\n      data: $data\n    ) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": types.UserMerchantTransactionProviderCreateDocument,
    "\n  query UserMerchantTransactionProviderGetCredentialsSchema($merchantId: String, $provider: TRANSACTION_PROVIDER!, $format: TRANSACTION_PROVIDER_CREDENTIALS_SCHEMA_FORMAT!) {\n    userMerchantTransactionProviderGetCredentialsSchema(\n      merchantId: $merchantId,\n      provider: $provider,\n      format: $format\n    )\n  }\n": types.UserMerchantTransactionProviderGetCredentialsSchemaDocument,
    "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n": types.MerchantTransactionProviderFragmentFragmentDoc,
    "\n  query UserMerchantTransactionProviders(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviders(\n      merchantId: $merchantId,\n      provider: $provider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantTransactionProvidersDocument,
    "\n  query UserMerchantTransactionProvider($merchantId: String, $merchantTransactionProviderId: String!) {\n    userMerchantTransactionProvider(merchantId: $merchantId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": types.UserMerchantTransactionProviderDocument,
    "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n\n    paymentPlanId\n\n    relatedTransactionId\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantTransactionFragmentFragmentDoc,
    "\n  query UserMerchantTransactions(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $action: TRANSACTION_ACTION,\n    $providerCode: String,\n    $providerRelatedCode: String,\n    $token: String,\n    $paymentMethodType: PAYMENT_METHOD,\n    $currency: CURRENCY,\n    $status: TRANSACTION_STATUS,\n    $statuses: [TRANSACTION_STATUS!],\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n    $transactionProviderId: String,\n    $paymentMethodId: String,\n    $paymentPlanId: String,\n    $relatedTransactionId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $started: Boolean,\n    $succeeded: Boolean,\n    $failed: Boolean,\n    $canceled: Boolean,\n    $reverted: Boolean,\n    $disputed: Boolean,\n    $transactionDateFrom: DateTimeISO,\n    $transactionDateTo: DateTimeISO,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactions(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      action: $action,\n      providerCode: $providerCode,\n      providerRelatedCode: $providerRelatedCode,\n      token: $token,\n      paymentMethodType: $paymentMethodType,\n      currency: $currency,\n      status: $status,\n      statuses: $statuses,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      transactionProviderId: $transactionProviderId,\n      paymentMethodId: $paymentMethodId,\n      paymentPlanId: $paymentPlanId,\n      relatedTransactionId: $relatedTransactionId,\n      transactionProvider: $transactionProvider,\n      started: $started,\n      succeeded: $succeeded,\n      failed: $failed,\n      canceled: $canceled,\n      reverted: $reverted,\n      disputed: $disputed,\n      hasProviderError: $hasProviderError,\n      \n      transactionDateFrom: $transactionDateFrom,\n      transactionDateTo: $transactionDateTo,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.UserMerchantTransactionsDocument,
    "\n  query UserMerchantTransaction(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransaction(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.UserMerchantTransactionDocument,
    "\n  mutation UserMerchantTransactionSyncOne(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransactionSyncOne(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.UserMerchantTransactionSyncOneDocument,
    "\n  fragment UserBaseFragment on User {\n    id\n    name\n    email\n    phone\n    createdAt\n    updatedAt\n    isAdmin\n    emailVerificationId\n    phoneVerificationId\n  }\n": types.UserBaseFragmentFragmentDoc,
    "\n  fragment UserFragment on User {\n    ...UserBaseFragment\n    merchants {\n      ...MerchantUserFragment\n    }\n  }\n": types.UserFragmentFragmentDoc,
    "\n  query User {\n    user {\n      ...UserFragment\n    }\n  }\n": types.UserDocument,
    "\n  mutation UserSignUpWithEmailStart($data: UserSignUpWithEmailStartSchema!) {\n    userSignUpWithEmailStart(data: $data)\n  }\n": types.UserSignUpWithEmailStartDocument,
    "\n  mutation UserSignUpWithEmailVerify($data: UserSignUpWithEmailVerifySchema!) {\n    userSignUpWithEmailVerify(data: $data)\n  }\n": types.UserSignUpWithEmailVerifyDocument,
    "\n  mutation UserSignUpWithEmailFinish($data: UserSignUpWithEmailFinishSchema!) {\n    userSignUpWithEmailFinish(data: $data)\n  }\n": types.UserSignUpWithEmailFinishDocument,
    "\n  mutation UserUpdateData($data: UserUpdateDataSchema!) {\n    userUpdateData(data: $data) {\n      ...UserFragment\n    }\n  }\n": types.UserUpdateDataDocument,
    "\n  mutation UserSessionsClose {\n    userSessionsClose\n  }\n": types.UserSessionsCloseDocument,
    "\n  mutation UserPasswordChangeStart($data: UserPasswordChangeStartSchema!) {\n    userPasswordChangeStart(data: $data)\n  }\n": types.UserPasswordChangeStartDocument,
    "\n  mutation UserPasswordChangeFinish($data: UserPasswordChangeFinishSchema!) {\n    userPasswordChangeFinish(data: $data)\n  }\n": types.UserPasswordChangeFinishDocument,
    "\n  mutation UserEmailVerifyOrChangeStart($data: UserEmailVerifyOrChangeStartSchema!) {\n    userEmailVerifyOrChangeStart(data: $data)\n  }\n": types.UserEmailVerifyOrChangeStartDocument,
    "\n  mutation UserEmailVerifyOrChangeFinish($data: UserEmailVerifyOrChangeFinishSchema!) {\n    userEmailVerifyOrChangeFinish(data: $data) {\n      ...UserFragment\n    }\n  }\n": types.UserEmailVerifyOrChangeFinishDocument,
    "\n  mutation UserHandleLoginAttempt($email: String!) {\n    userHandleLoginAttempt(email: $email)\n  }\n": types.UserHandleLoginAttemptDocument,
    "\n  mutation UserPasswordResetStart($data: UserPasswordResetStartSchema!) {\n    userPasswordResetStart(data: $data)\n  }\n": types.UserPasswordResetStartDocument,
    "\n  mutation UserPasswordResetFinish($data: UserPasswordResetFinishSchema!) {\n    userPasswordResetFinish(data: $data)\n  }\n": types.UserPasswordResetFinishDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantCustomerPaymentMethods(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n    $isDefault: Boolean,\n    $merchantInternalCustomerCode: String,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantCustomerPaymentMethods(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      methodType: $methodType,\n      isDefault: $isDefault,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantCustomerPaymentMethods(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n    $isDefault: Boolean,\n    $merchantInternalCustomerCode: String,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantCustomerPaymentMethods(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      methodType: $methodType,\n      isDefault: $isDefault,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantCustomerPaymentMethod($merchantId: String, $merchantCustomerPaymentMethodId: String!) {\n    userMerchantCustomerPaymentMethod(merchantId: $merchantId, merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantCustomerPaymentMethod($merchantId: String, $merchantCustomerPaymentMethodId: String!) {\n    userMerchantCustomerPaymentMethod(merchantId: $merchantId, merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantCustomerPaymentMethodSyncOne(\n    $merchantId: String,\n    $merchantInternalCustomerCode: String!,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantCustomerPaymentMethodSyncOne(\n      merchantId: $merchantId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantCustomerPaymentMethodSyncOne(\n    $merchantId: String,\n    $merchantInternalCustomerCode: String!,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantCustomerPaymentMethodSyncOne(\n      merchantId: $merchantId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HealthCheck {\n    healthCheck\n  }\n"): (typeof documents)["\n  query HealthCheck {\n    healthCheck\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantUserInvitationFragment on MerchantUserInvitation {\n    id\n\n    role\n    email\n\n    expiresAt\n    acceptedAt\n    rejectedAt\n    canceledAt\n\n    createdByMerchantUserId\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    updatedAt\n    createdAt\n  }\n"): (typeof documents)["\n  fragment MerchantUserInvitationFragment on MerchantUserInvitation {\n    id\n\n    role\n    email\n\n    expiresAt\n    acceptedAt\n    rejectedAt\n    canceledAt\n\n    createdByMerchantUserId\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    updatedAt\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantSentInvitations(\n    $merchantId: String!,\n    $accepted: Boolean,\n    $canceled: Boolean,\n    $expired: Boolean,\n    $rejected: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantSentInvitations(\n      merchantId: $merchantId,\n\n      accepted: $accepted,\n      canceled: $canceled,\n      expired: $expired,\n      rejected: $rejected,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantSentInvitations(\n    $merchantId: String!,\n    $accepted: Boolean,\n    $canceled: Boolean,\n    $expired: Boolean,\n    $rejected: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantSentInvitations(\n      merchantId: $merchantId,\n\n      accepted: $accepted,\n      canceled: $canceled,\n      expired: $expired,\n      rejected: $rejected,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantSentInvitation($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitation(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantSentInvitation($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitation(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantSentInvitationCreate($data: MerchantUserInvitationCreateSchema!, $merchantId: String) {\n    userMerchantSentInvitationCreate(data: $data, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantSentInvitationCreate($data: MerchantUserInvitationCreateSchema!, $merchantId: String) {\n    userMerchantSentInvitationCreate(data: $data, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantSentInvitationCancel($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitationCancel(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantSentInvitationCancel($invitationId: String!, $merchantId: String) {\n    userMerchantSentInvitationCancel(invitationId: $invitationId, merchantId: $merchantId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserReceivedMerchantInvitations(\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userReceivedMerchantInvitations(\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserReceivedMerchantInvitations(\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userReceivedMerchantInvitations(\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantUserInvitationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserReceivedMerchantInvitation($invitationId: String!) {\n    userReceivedMerchantInvitation(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  query UserReceivedMerchantInvitation($invitationId: String!) {\n    userReceivedMerchantInvitation(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserReceivedMerchantInvitationAccept($invitationId: String!) {\n    userReceivedMerchantInvitationAccept(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserReceivedMerchantInvitationAccept($invitationId: String!) {\n    userReceivedMerchantInvitationAccept(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserReceivedMerchantInvitationReject($invitationId: String!) {\n    userReceivedMerchantInvitationReject(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserReceivedMerchantInvitationReject($invitationId: String!) {\n    userReceivedMerchantInvitationReject(invitationId: $invitationId) {\n      ...MerchantUserInvitationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantUserFragment on MerchantUser {\n    id\n    isEnabled\n    role\n    createdAt\n    updatedAt\n\n    user {\n      ...UserBaseFragment\n    }\n\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    invitationId\n  }\n"): (typeof documents)["\n  fragment MerchantUserFragment on MerchantUser {\n    id\n    isEnabled\n    role\n    createdAt\n    updatedAt\n\n    user {\n      ...UserBaseFragment\n    }\n\n    merchantId\n    merchant {\n      ...MerchantFragment\n    }\n\n    invitationId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchants(\n    $merchantId: String,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchants(\n      id: $merchantId,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchants(\n    $merchantId: String,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchants(\n      id: $merchantId,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchant($merchantId: String!) {\n    userMerchant(merchantId: $merchantId) {\n      ...MerchantFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchant($merchantId: String!) {\n    userMerchant(merchantId: $merchantId) {\n      ...MerchantFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantCreate($data: MerchantCreateSchema!) {\n    userMerchantCreate(data: $data) {\n      ...MerchantUserFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantCreate($data: MerchantCreateSchema!) {\n    userMerchantCreate(data: $data) {\n      ...MerchantUserFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantUpdate($merchantId: String!, $data: MerchantUpdateSchema!) {\n    userMerchantUpdate(merchantId: $merchantId, data: $data) {\n      ...MerchantFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantUpdate($merchantId: String!, $data: MerchantUpdateSchema!) {\n    userMerchantUpdate(merchantId: $merchantId, data: $data) {\n      ...MerchantFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantPaymentPlanTemplates(\n    $merchantId: String,\n    $id: String,\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlanTemplates(\n      merchantId: $merchantId,\n      id: $id,\n      name: $name,\n      currency: $currency,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantPaymentPlanTemplates(\n    $merchantId: String,\n    $id: String,\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlanTemplates(\n      merchantId: $merchantId,\n      id: $id,\n      name: $name,\n      currency: $currency,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantPaymentPlanTemplate($merchantId: String, $id: String!) {\n    userMerchantPaymentPlanTemplate(merchantId: $merchantId, id: $id) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantPaymentPlanTemplate($merchantId: String, $id: String!) {\n    userMerchantPaymentPlanTemplate(merchantId: $merchantId, id: $id) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantPaymentPlanTemplateSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanTemplateSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantPaymentPlanTemplateSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanTemplateSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    templateId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    templateId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantPaymentPlans(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n    $currency: CURRENCY,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n    $templateId: String,\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n    $hasProviderError: Boolean,\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlans(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n      templateId: $templateId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n      hasProviderError: $hasProviderError,\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantPaymentPlans(\n    $merchantId: String,\n    $id: String,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n    $currency: CURRENCY,\n    $transactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n    $templateId: String,\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n    $hasProviderError: Boolean,\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantPaymentPlans(\n      merchantId: $merchantId,\n      id: $id,\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n      transactionProviderId: $transactionProviderId,\n      transactionProvider: $transactionProvider,\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n      templateId: $templateId,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n      hasProviderError: $hasProviderError,\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantPaymentPlan($merchantId: String, $merchantPaymentPlanId: String!) {\n    userMerchantPaymentPlan(merchantId: $merchantId, merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantPaymentPlan($merchantId: String, $merchantPaymentPlanId: String!) {\n    userMerchantPaymentPlan(merchantId: $merchantId, merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantPaymentPlanSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantPaymentPlanSyncOne(\n    $merchantId: String,\n    $merchantTransactionProviderId: String!,\n    $providerCode: String!\n  ) {\n    userMerchantPaymentPlanSyncOne(\n      merchantId: $merchantId,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      providerCode: $providerCode\n    ) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionProviderApplicationFragment on MerchantTransactionProviderApplication {\n    id\n    merchantId\n    provider\n    providerCode\n    providerStatus\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    status\n    statusDescription\n    startedAt\n    closedAt\n    createdAt\n    updatedAt\n\n    name\n    industry\n    websiteUrl\n    entityType\n    email\n    phone\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionProviderApplicationFragment on MerchantTransactionProviderApplication {\n    id\n    merchantId\n    provider\n    providerCode\n    providerStatus\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    status\n    statusDescription\n    startedAt\n    closedAt\n    createdAt\n    updatedAt\n\n    name\n    industry\n    websiteUrl\n    entityType\n    email\n    phone\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactionProviderApplications(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $providerCode: String,\n    $status: MERCHANT_TRANSACTION_PROVIDER_APPLICATION_STATUS,\n    $started: Boolean,\n    $closed: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviderApplications(\n      merchantId: $merchantId,\n      provider: $provider,\n      providerCode: $providerCode,\n      status: $status,\n      started: $started,\n      closed: $closed,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderApplicationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransactionProviderApplications(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $providerCode: String,\n    $status: MERCHANT_TRANSACTION_PROVIDER_APPLICATION_STATUS,\n    $started: Boolean,\n    $closed: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviderApplications(\n      merchantId: $merchantId,\n      provider: $provider,\n      providerCode: $providerCode,\n      status: $status,\n      started: $started,\n      closed: $closed,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderApplicationFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactionProviderApplication($merchantId: String, $merchantTransactionProviderApplicationId: String!) {\n    userMerchantTransactionProviderApplication(\n      merchantId: $merchantId,\n      merchantTransactionProviderApplicationId: $merchantTransactionProviderApplicationId\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransactionProviderApplication($merchantId: String, $merchantTransactionProviderApplicationId: String!) {\n    userMerchantTransactionProviderApplication(\n      merchantId: $merchantId,\n      merchantTransactionProviderApplicationId: $merchantTransactionProviderApplicationId\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantTransactionProviderApplicationApply($merchantId: String, $provider: TRANSACTION_PROVIDER!) {\n    userMerchantTransactionProviderApplicationApply(\n      merchantId: $merchantId,\n      provider: $provider\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantTransactionProviderApplicationApply($merchantId: String, $provider: TRANSACTION_PROVIDER!) {\n    userMerchantTransactionProviderApplicationApply(\n      merchantId: $merchantId,\n      provider: $provider\n    ) {\n      ...MerchantTransactionProviderApplicationFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantTransactionProviderCreate($merchantId: String, $data: UserMerchantTransactionProviderCreateSchema!) {\n    userMerchantTransactionProviderCreate(\n      merchantId: $merchantId,\n      data: $data\n    ) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantTransactionProviderCreate($merchantId: String, $data: UserMerchantTransactionProviderCreateSchema!) {\n    userMerchantTransactionProviderCreate(\n      merchantId: $merchantId,\n      data: $data\n    ) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactionProviderGetCredentialsSchema($merchantId: String, $provider: TRANSACTION_PROVIDER!, $format: TRANSACTION_PROVIDER_CREDENTIALS_SCHEMA_FORMAT!) {\n    userMerchantTransactionProviderGetCredentialsSchema(\n      merchantId: $merchantId,\n      provider: $provider,\n      format: $format\n    )\n  }\n"): (typeof documents)["\n  query UserMerchantTransactionProviderGetCredentialsSchema($merchantId: String, $provider: TRANSACTION_PROVIDER!, $format: TRANSACTION_PROVIDER_CREDENTIALS_SCHEMA_FORMAT!) {\n    userMerchantTransactionProviderGetCredentialsSchema(\n      merchantId: $merchantId,\n      provider: $provider,\n      format: $format\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactionProviders(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviders(\n      merchantId: $merchantId,\n      provider: $provider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransactionProviders(\n    $merchantId: String,\n    $provider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactionProviders(\n      merchantId: $merchantId,\n      provider: $provider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactionProvider($merchantId: String, $merchantTransactionProviderId: String!) {\n    userMerchantTransactionProvider(merchantId: $merchantId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransactionProvider($merchantId: String, $merchantTransactionProviderId: String!) {\n    userMerchantTransactionProvider(merchantId: $merchantId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n\n    paymentPlanId\n\n    relatedTransactionId\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n\n    paymentPlanId\n\n    relatedTransactionId\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransactions(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $action: TRANSACTION_ACTION,\n    $providerCode: String,\n    $providerRelatedCode: String,\n    $token: String,\n    $paymentMethodType: PAYMENT_METHOD,\n    $currency: CURRENCY,\n    $status: TRANSACTION_STATUS,\n    $statuses: [TRANSACTION_STATUS!],\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n    $transactionProviderId: String,\n    $paymentMethodId: String,\n    $paymentPlanId: String,\n    $relatedTransactionId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $started: Boolean,\n    $succeeded: Boolean,\n    $failed: Boolean,\n    $canceled: Boolean,\n    $reverted: Boolean,\n    $disputed: Boolean,\n    $transactionDateFrom: DateTimeISO,\n    $transactionDateTo: DateTimeISO,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactions(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      action: $action,\n      providerCode: $providerCode,\n      providerRelatedCode: $providerRelatedCode,\n      token: $token,\n      paymentMethodType: $paymentMethodType,\n      currency: $currency,\n      status: $status,\n      statuses: $statuses,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      transactionProviderId: $transactionProviderId,\n      paymentMethodId: $paymentMethodId,\n      paymentPlanId: $paymentPlanId,\n      relatedTransactionId: $relatedTransactionId,\n      transactionProvider: $transactionProvider,\n      started: $started,\n      succeeded: $succeeded,\n      failed: $failed,\n      canceled: $canceled,\n      reverted: $reverted,\n      disputed: $disputed,\n      hasProviderError: $hasProviderError,\n      \n      transactionDateFrom: $transactionDateFrom,\n      transactionDateTo: $transactionDateTo,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransactions(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $action: TRANSACTION_ACTION,\n    $providerCode: String,\n    $providerRelatedCode: String,\n    $token: String,\n    $paymentMethodType: PAYMENT_METHOD,\n    $currency: CURRENCY,\n    $status: TRANSACTION_STATUS,\n    $statuses: [TRANSACTION_STATUS!],\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n    $transactionProviderId: String,\n    $paymentMethodId: String,\n    $paymentPlanId: String,\n    $relatedTransactionId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $started: Boolean,\n    $succeeded: Boolean,\n    $failed: Boolean,\n    $canceled: Boolean,\n    $reverted: Boolean,\n    $disputed: Boolean,\n    $transactionDateFrom: DateTimeISO,\n    $transactionDateTo: DateTimeISO,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    userMerchantTransactions(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      action: $action,\n      providerCode: $providerCode,\n      providerRelatedCode: $providerRelatedCode,\n      token: $token,\n      paymentMethodType: $paymentMethodType,\n      currency: $currency,\n      status: $status,\n      statuses: $statuses,\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      transactionProviderId: $transactionProviderId,\n      paymentMethodId: $paymentMethodId,\n      paymentPlanId: $paymentPlanId,\n      relatedTransactionId: $relatedTransactionId,\n      transactionProvider: $transactionProvider,\n      started: $started,\n      succeeded: $succeeded,\n      failed: $failed,\n      canceled: $canceled,\n      reverted: $reverted,\n      disputed: $disputed,\n      hasProviderError: $hasProviderError,\n      \n      transactionDateFrom: $transactionDateFrom,\n      transactionDateTo: $transactionDateTo,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserMerchantTransaction(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransaction(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  query UserMerchantTransaction(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransaction(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserMerchantTransactionSyncOne(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransactionSyncOne(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserMerchantTransactionSyncOne(\n    $merchantId: String,\n    $id: String,\n    $code: String,\n    $merchantInternalTransactionCode: String,\n    $providerCode: String,\n    $token: String\n  ) {\n    userMerchantTransactionSyncOne(\n      merchantId: $merchantId,\n      id: $id,\n      code: $code,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      providerCode: $providerCode,\n      token: $token\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserBaseFragment on User {\n    id\n    name\n    email\n    phone\n    createdAt\n    updatedAt\n    isAdmin\n    emailVerificationId\n    phoneVerificationId\n  }\n"): (typeof documents)["\n  fragment UserBaseFragment on User {\n    id\n    name\n    email\n    phone\n    createdAt\n    updatedAt\n    isAdmin\n    emailVerificationId\n    phoneVerificationId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserFragment on User {\n    ...UserBaseFragment\n    merchants {\n      ...MerchantUserFragment\n    }\n  }\n"): (typeof documents)["\n  fragment UserFragment on User {\n    ...UserBaseFragment\n    merchants {\n      ...MerchantUserFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query User {\n    user {\n      ...UserFragment\n    }\n  }\n"): (typeof documents)["\n  query User {\n    user {\n      ...UserFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserSignUpWithEmailStart($data: UserSignUpWithEmailStartSchema!) {\n    userSignUpWithEmailStart(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserSignUpWithEmailStart($data: UserSignUpWithEmailStartSchema!) {\n    userSignUpWithEmailStart(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserSignUpWithEmailVerify($data: UserSignUpWithEmailVerifySchema!) {\n    userSignUpWithEmailVerify(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserSignUpWithEmailVerify($data: UserSignUpWithEmailVerifySchema!) {\n    userSignUpWithEmailVerify(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserSignUpWithEmailFinish($data: UserSignUpWithEmailFinishSchema!) {\n    userSignUpWithEmailFinish(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserSignUpWithEmailFinish($data: UserSignUpWithEmailFinishSchema!) {\n    userSignUpWithEmailFinish(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserUpdateData($data: UserUpdateDataSchema!) {\n    userUpdateData(data: $data) {\n      ...UserFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserUpdateData($data: UserUpdateDataSchema!) {\n    userUpdateData(data: $data) {\n      ...UserFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserSessionsClose {\n    userSessionsClose\n  }\n"): (typeof documents)["\n  mutation UserSessionsClose {\n    userSessionsClose\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserPasswordChangeStart($data: UserPasswordChangeStartSchema!) {\n    userPasswordChangeStart(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserPasswordChangeStart($data: UserPasswordChangeStartSchema!) {\n    userPasswordChangeStart(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserPasswordChangeFinish($data: UserPasswordChangeFinishSchema!) {\n    userPasswordChangeFinish(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserPasswordChangeFinish($data: UserPasswordChangeFinishSchema!) {\n    userPasswordChangeFinish(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserEmailVerifyOrChangeStart($data: UserEmailVerifyOrChangeStartSchema!) {\n    userEmailVerifyOrChangeStart(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserEmailVerifyOrChangeStart($data: UserEmailVerifyOrChangeStartSchema!) {\n    userEmailVerifyOrChangeStart(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserEmailVerifyOrChangeFinish($data: UserEmailVerifyOrChangeFinishSchema!) {\n    userEmailVerifyOrChangeFinish(data: $data) {\n      ...UserFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UserEmailVerifyOrChangeFinish($data: UserEmailVerifyOrChangeFinishSchema!) {\n    userEmailVerifyOrChangeFinish(data: $data) {\n      ...UserFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserHandleLoginAttempt($email: String!) {\n    userHandleLoginAttempt(email: $email)\n  }\n"): (typeof documents)["\n  mutation UserHandleLoginAttempt($email: String!) {\n    userHandleLoginAttempt(email: $email)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserPasswordResetStart($data: UserPasswordResetStartSchema!) {\n    userPasswordResetStart(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserPasswordResetStart($data: UserPasswordResetStartSchema!) {\n    userPasswordResetStart(data: $data)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UserPasswordResetFinish($data: UserPasswordResetFinishSchema!) {\n    userPasswordResetFinish(data: $data)\n  }\n"): (typeof documents)["\n  mutation UserPasswordResetFinish($data: UserPasswordResetFinishSchema!) {\n    userPasswordResetFinish(data: $data)\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;